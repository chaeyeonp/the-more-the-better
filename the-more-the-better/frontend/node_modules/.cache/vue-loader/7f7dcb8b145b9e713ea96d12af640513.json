{"remainingRequest":"C:\\Users\\Playdata\\Desktop\\the-more-the-better\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Playdata\\Desktop\\the-more-the-better\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Playdata\\Desktop\\the-more-the-better\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Playdata\\Desktop\\the-more-the-better\\frontend\\src\\components\\servicecoms\\ServiceEnroll.vue?vue&type=template&id=3cddbd73&scoped=true&","dependencies":[{"path":"C:\\Users\\Playdata\\Desktop\\the-more-the-better\\frontend\\src\\components\\servicecoms\\ServiceEnroll.vue","mtime":1599563444812},{"path":"C:\\Users\\Playdata\\Desktop\\the-more-the-better\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Playdata\\Desktop\\the-more-the-better\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Playdata\\Desktop\\the-more-the-better\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Playdata\\Desktop\\the-more-the-better\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}